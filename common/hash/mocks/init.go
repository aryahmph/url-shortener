// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hash is an autogenerated mock type for the Hash type
type Hash struct {
	mock.Mock
}

type Hash_Expecter struct {
	mock *mock.Mock
}

func (_m *Hash) EXPECT() *Hash_Expecter {
	return &Hash_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: number
func (_m *Hash) Hash(number uint64) string {
	ret := _m.Called(number)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Hash_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Hash_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - number uint64
func (_e *Hash_Expecter) Hash(number interface{}) *Hash_Hash_Call {
	return &Hash_Hash_Call{Call: _e.mock.On("Hash", number)}
}

func (_c *Hash_Hash_Call) Run(run func(number uint64)) *Hash_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Hash_Hash_Call) Return(_a0 string) *Hash_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hash_Hash_Call) RunAndReturn(run func(uint64) string) *Hash_Hash_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHash interface {
	mock.TestingT
	Cleanup(func())
}

// NewHash creates a new instance of Hash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHash(t mockConstructorTestingTNewHash) *Hash {
	mock := &Hash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
